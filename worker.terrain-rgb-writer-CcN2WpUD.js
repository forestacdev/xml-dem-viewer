(function(){"use strict";const N=g=>{if(g===-9999||isNaN(g))return[0,0,0,0];const r=(g+1e4)*10,l=Math.max(0,Math.min(16777215,Math.round(r))),i=Math.floor(l/65536),p=Math.floor(l%65536/256),$=l%256;return[i,p,$,255]},k=(g,r)=>{const l=g.length,i=g[0].length,p=3,$=p,d=i*l*$;console.log(`Creating Terrain RGB GeoTIFF (RGB-only): ${i}x${l}, ${d} bytes`);const L=new Float64Array([Math.abs(r.pixelSizeX),Math.abs(r.pixelSizeY),0]),C=new Float64Array([0,0,0,r.upperLeftX,r.upperLeftY,0]),m=new Uint16Array([1,1,0,3,1024,0,1,2,1025,0,1,1,2048,0,1,4326]),D="Terrain RGB encoded elevation data (RGB-only)",x="0 0 0",w=new Uint16Array([8,8,8]),M=(e,c)=>Math.ceil(e/c)*c,H=8,I=17,O=2,z=I*12,A=4,V=O+z+A;console.log(`IFD構造: ヘッダー=${O}, エントリ=${z}, 次オフセット=${A}, 合計=${V}`);let t=H+V;const T=t;t+=D.length+1;const G=t;t+=x.length+1,t=M(t,2);const S=t;t+=m.length*2;const B=t;t+=w.length*2,t=M(t,8);const U=t;t+=24;const F=t;t+=48,t=M(t,4);const f=t,u=f+d;console.log("オフセット詳細:"),console.log(`- imageDescription: ${T}`),console.log(`- nodataString: ${G}`),console.log(`- geoKeyDirectory: ${S}`),console.log(`- bitsPerSample: ${B}`),console.log(`- modelPixelScale: ${U}`),console.log(`- modelTiepoint: ${F}`),console.log(`- imageData: ${f}`),console.log(`- totalSize: ${u}`);const h=new ArrayBuffer(u),n=new DataView(h);let o=0;n.setUint16(o,18761,!0),o+=2,n.setUint16(o,42,!0),o+=2,n.setUint32(o,8,!0),o+=4,console.log(`TIFFヘッダー完了: offset=${o}`);const E=o;n.setUint16(o,I,!0),o+=2;const s=(e,c,y,b)=>{n.setUint16(o,e,!0),n.setUint16(o+2,c,!0),n.setUint32(o+4,y,!0),n.setUint32(o+8,b,!0),o+=12};s(256,4,1,i),s(257,4,1,l),s(258,3,3,B),s(259,3,1,1),s(262,3,1,2),s(270,2,D.length+1,T),s(273,4,1,f),s(277,3,1,p),s(278,4,1,l),s(279,4,1,d),s(282,5,1,0),s(283,5,1,0),s(284,3,1,1),s(296,3,1,2),s(33550,12,3,U),s(33922,12,6,F),s(34735,3,m.length,S),s(42113,2,x.length+1,G),n.setUint32(o,0,!0),o+=4,console.log(`IFD完了: 開始=${E}, 終了=${o}, サイズ=${o-E}`);const P=new TextEncoder().encode(D+"\0");new Uint8Array(h,T,P.length).set(P),console.log(`ImageDescription書き込み完了: ${T} (${P.length}バイト)`);const R=new TextEncoder().encode(x+"\0");new Uint8Array(h,G,R.length).set(R),console.log(`NoData文字列書き込み完了: ${G} (${R.length}バイト)`),new Uint16Array(h,S,m.length).set(m),console.log(`GeoKeyDirectory書き込み完了: ${S} (${m.length*2}バイト)`),new Uint16Array(h,B,w.length).set(w),console.log(`BitsPerSample書き込み完了: ${B} (${w.length*2}バイト)`);for(let e=0;e<3;e++)n.setFloat64(U+e*8,L[e],!0);console.log(`ModelPixelScale書き込み完了: ${U} (24バイト)`);for(let e=0;e<6;e++)n.setFloat64(F+e*8,C[e],!0);console.log(`ModelTiepoint書き込み完了: ${F} (48バイト)`),console.log(`画像データ書き込み開始: ${f}`);let a=f,v=0,K=0;for(let e=0;e<l;e++){for(let c=0;c<i;c++){const y=g[e][c];if(y===-9999||isNaN(y)||!isFinite(y))n.setUint8(a,0),n.setUint8(a+1,0),n.setUint8(a+2,0),K++;else{const[b,X,Y]=N(y);n.setUint8(a,b),n.setUint8(a+1,X),n.setUint8(a+2,Y),v++}a+=3}if(e%100===0){const c=e/l*.8+.1;self.postMessage({type:"progress",message:`Terrain RGB変換中 (RGB): ${(e/l*100).toFixed(1)}%`,progress:c})}}return console.log("画像データ書き込み完了:"),console.log(`- 有効ピクセル: ${v}`),console.log(`- 無効ピクセル: ${K}`),console.log(`- 実際の画像データサイズ: ${a-f} バイト`),console.log(`- 予想サイズ: ${d} バイト`),a-f!==d&&console.error(`画像データサイズの不整合: 実際=${a-f}, 予想=${d}`),a>u&&console.error(`バッファオーバーフロー: 実際=${a}, バッファサイズ=${u}`),console.log(`RGB版 TiffBuffer作成完了: ${u} バイト`),h};self.onmessage=g=>{const{demArray:r,geoTransform:l}=g.data;try{if(self.postMessage({type:"progress",message:"Terrain RGB GeoTIFF処理開始...",progress:0}),!r||!r.length||!r[0]||!r[0].length)throw new Error("Invalid demArray data");if(!l)throw new Error("Invalid geoTransform data");const i=r[0].length,p=r.length;self.postMessage({type:"info",message:`処理データ: ${i} × ${p} pixels (Terrain RGB形式)`}),self.postMessage({type:"progress",message:"Terrain RGB GeoTIFF作成中...",progress:.1});const $=k(r,l);self.postMessage({type:"progress",message:"Terrain RGB GeoTIFF作成完了",progress:1}),self.postMessage({type:"complete",buffer:$,message:"Terrain RGB GeoTIFF作成完了",width:i,height:p,size:$.byteLength,format:"TerrainRGB"})}catch(i){i instanceof Error?self.postMessage({type:"error",error:i.message,stack:i.stack}):self.postMessage({type:"error",error:"Unknown error occurred",stack:""})}}})();
